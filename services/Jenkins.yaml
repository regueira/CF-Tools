AWSTemplateFormatVersion: "2010-09-09"
Description: >
  Jenkins Service on ECS

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: 1- Resource Identification
      Parameters:
      - Project
      - Environment
    - Label:
        default: 2- VPC/Network
      Parameters:
      - VpcId
      - Subnets
    - Label:
        default: 3- ECS Cluster
      Parameters:
      - ECSCluster
      - ELBSecurityGroup
    - Label:
        default: 4- Jenkins Container
      Parameters:
      - Image
      - DesiredCount
      - ContainerCPU
      - ContainerMemory
      - ContainerPort
      - JNLPContainerPort

Parameters:
  Project:
    Description: Project name
    Type: String

  Environment:
    Description: Environment of the project
    Type: String
    Default: DEV
    AllowedValues:
    - DEV
    - QA
    - UAT
    - PROD

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Select a VPC that allows instances to access the Internet.

  Subnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Select at two subnets in your selected VPC.

  ECSCluster:
    Description: Name of ECS Cluster for the task
    Type: String

  Image:
    Description: Name of the image
    Type: String
    Default: jenkins/jenkins:lts

  ContainerCPU:
    Description: CPU credits for docker container
    Type: String
    Default: 1024

  ContainerMemory:
    Type: String
    Default: 1024

  ContainerPort:
    Type: Number
    Default: 8080

  JNLPContainerPort:
    Type: Number
    Default: 50000

  ELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id
    Description: Cluster Load Balancer Security group

  DesiredCount:
    Description: How many instances of this task should we run across our cluster?
    Type: Number
    Default: 1

Resources:

  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref AWS::StackName
      RetentionInDays: 90

  JenkinsLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      LoadBalancerName: !Sub Jenkins-${Project}-${Environment}-elb
      Subnets: !Ref Subnets
      Scheme: internet-facing
      SecurityGroups:
      - !Ref ELBSecurityGroup
      Listeners:
      - InstancePort: 8080
        InstanceProtocol: HTTP
        LoadBalancerPort: 80
        Protocol: HTTP
        PolicyNames:
        - JenkinsELBStickiness
      - LoadBalancerPort: 50000
        InstancePort: 50000
        Protocol: TCP
      LBCookieStickinessPolicy:
      - CookieExpirationPeriod: '3600'
        PolicyName: JenkinsELBStickiness
      HealthCheck:
        HealthyThreshold: 2
        Interval: 30
        Target: HTTP:8080/login
        Timeout: 10
        UnhealthyThreshold: 10
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Jenkins
            - Ref: Project
            - Ref: Environment
      - Key: Project
        Value:
          Ref: Project
      - Key: Environment
        Value:
          Ref: Environment


  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family:
        Fn::Join:
        - "-"
        - - Jenkins
          - Ref: Project
          - task
      Volumes:
      - Name: jenkins-home
        Host:
          SourcePath: /EFS/jenkins_home
      - Name: docker-socket
        Host:
          SourcePath: /var/run/docker.sock
      ContainerDefinitions:
      - Name: Jenkins
        Cpu:
          Ref: ContainerCPU
        Essential: true
        Image: !Ref Image
        Privileged: true
        MountPoints:
        - SourceVolume: jenkins-home
          ContainerPath: /var/jenkins_home
        - SourceVolume: docker-socket
          ContainerPath: /var/run/docker.sock
        Memory: !Ref ContainerMemory
        PortMappings:
        - HostPort: !Ref ContainerPort
          ContainerPort: !Ref ContainerPort
          Protocol: tcp
        - HostPort: !Ref JNLPContainerPort
          ContainerPort: !Ref JNLPContainerPort
          Protocol: tcp
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref AWS::StackName
            awslogs-region: !Ref AWS::Region
            awslogs-stream-prefix: Jenkins

  Service:
    Type: AWS::ECS::Service
    DependsOn: JenkinsLoadBalancer
    Properties:
      Cluster: !Ref ECSCluster
      Role: !Ref ServiceRole
      DesiredCount: !Ref DesiredCount
      TaskDefinition: !Ref TaskDefinition
      DeploymentConfiguration:
        MinimumHealthyPercent: 50
      LoadBalancers:
      - ContainerName: Jenkins
        ContainerPort: !Ref ContainerPort
        LoadBalancerName: !Ref JenkinsLoadBalancer

  ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ecs-service-${AWS::StackName}
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "ecs.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
      - PolicyName: !Sub ecs-service-${AWS::StackName}
        PolicyDocument:
          {
            "Version": "2012-10-17",
            "Statement": [{
                            "Effect": "Allow",
                            "Action": [
                              "ec2:AuthorizeSecurityGroupIngress",
                              "ec2:Describe*",
                              "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                              "elasticloadbalancing:Describe*",
                              "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                              "elasticloadbalancing:DeregisterTargets",
                              "elasticloadbalancing:DescribeTargetGroups",
                              "elasticloadbalancing:DescribeTargetHealth",
                              "elasticloadbalancing:RegisterTargets"
                            ],
                            "Resource": "*"
                          }]
          }
Outputs:
  ecsservice:
    Value: !Ref Service
  JenkinsLoadBalancer:
    Description: Your ELB DNS URL
    Value:
      Fn::Join:
      - ''
      - - Fn::GetAtt:
          - JenkinsLoadBalancer
          - DNSName
  taskdef:
    Value: !Ref TaskDefinition
